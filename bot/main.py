# bot/main.py
from __future__ import annotations

import os
import json
from collections import defaultdict
from pathlib import Path
from typing import Dict, List, Tuple

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from dotenv import load_dotenv


# ---------- –ü—É—Ç–∏ / –∫–æ–Ω—Ñ–∏–≥ ----------
BASE_DIR = Path(__file__).resolve().parents[1]
ENV_PATH = BASE_DIR / ".env"
DATA_DIR = BASE_DIR / "data"
MENU_PATH = DATA_DIR / "menu.json"

load_dotenv(ENV_PATH)

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env –∏ —Ñ–æ—Ä–º–∞—Ç BOT_TOKEN=...")

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher()


# ---------- –î–∞–Ω–Ω—ã–µ ----------
def load_menu() -> List[Dict]:
    with open(MENU_PATH, "r", encoding="utf-8") as f:
        return json.load(f)


MENU: List[Dict] = load_menu()
# –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –ø–æ id
PIZZAS_BY_ID: Dict[int, Dict] = {int(p["id"]): p for p in MENU}
# –ö–æ—Ä–∑–∏–Ω–∞ –≤ –ø–∞–º—è—Ç–∏: user_id -> —Å–ø–∏—Å–æ–∫ pizza_id
CART: Dict[int, List[int]] = defaultdict(list)


# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ----------
def cart_text(uid: int) -> Tuple[str, float]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã –∏ —Å—É–º–º—É. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.
    """
    items = CART.get(uid, [])
    if not items:
        return "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /menu –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–∏—Ü—Ü—ã.", 0.0

    lines: List[str] = []
    total = 0.0
    for pid in items:
        p = PIZZAS_BY_ID.get(pid)
        if not p:
            continue
        price = float(p.get("price", 0))
        total += price
        lines.append(f'{p.get("name", "–ü–∏—Ü—Ü–∞")} ‚Äî {price:.2f}$')

    text = "<b>–ö–æ—Ä–∑–∏–Ω–∞</b>\n" + "\n".join(lines) + f"\n\n<b>–ò—Ç–æ–≥–æ:</b> {total:.2f}$"
    return text, total


# ---------- FSM –∑–∞–∫–∞–∑–∞ ----------
class OrderForm(StatesGroup):
    phone = State()
    address = State()


async def begin_order(message: types.Message, uid: int, state: FSMContext) -> None:
    if not CART.get(uid):
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ /menu ‚ûú –¥–æ–±–∞–≤—å—Ç–µ –ø–∏—Ü—Ü—ã.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, +44 7000 000000):")
    await state.set_state(OrderForm.phone)


# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–∏—Ü—Ü–µ—Ä–∏—è üçï. –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑.\n–ù–∞–ø–∏—à–∏ /menu")


@dp.message(Command("menu"))
async def cmd_menu(message: types.Message) -> None:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é
    for p in MENU:
        pid = int(p["id"])
        text = (
            f"<b>{p.get('name')}</b>\n"
            f"{p.get('desc')}\n"
            f"–¶–µ–Ω–∞: {float(p.get('price', 0)):.2f}$"
        )
        kb = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add:{pid}"
                    )
                ]
            ]
        )
        await message.answer(text, reply_markup=kb)

    # –ö–Ω–æ–ø–∫–∞ ¬´–ö–æ—Ä–∑–∏–Ω–∞¬ª
    kb_cart = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üß∫ –û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart")]
        ]
    )
    await message.answer("–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–æ—Ä–∑–∏–Ω—É:", reply_markup=kb_cart)


@dp.message(Command("cart"))
async def cmd_cart(message: types.Message) -> None:
    text, _ = cart_text(message.from_user.id)
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear")],
            [types.InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order")],
        ]
    )
    await message.answer(text, reply_markup=kb)


@dp.message(Command("order"))
async def cmd_order(message: types.Message, state: FSMContext) -> None:
    await begin_order(message, message.from_user.id, state)


# ---------- Callback-–∫–Ω–æ–ø–∫–∏ ----------
@dp.callback_query(F.data.startswith("add:"))
async def on_add(cb: types.CallbackQuery) -> None:
    try:
        pid = int(cb.data.split(":", 1)[1])
    except Exception:
        await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä", show_alert=True)
        return

    if pid not in PIZZAS_BY_ID:
        await cb.answer("–ü–∏—Ü—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    CART[cb.from_user.id].append(pid)
    await cb.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ", show_alert=False)


@dp.callback_query(F.data == "cart")
async def on_cart(cb: types.CallbackQuery) -> None:
    text, _ = cart_text(cb.from_user.id)
    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear")],
            [types.InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order")],
        ]
    )
    await cb.message.answer(text or "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ /menu ‚ûú –¥–æ–±–∞–≤—å—Ç–µ –ø–∏—Ü—Ü—ã.", reply_markup=kb)
    await cb.answer()


@dp.callback_query(F.data == "clear")
async def on_clear(cb: types.CallbackQuery) -> None:
    CART.pop(cb.from_user.id, None)
    await cb.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ üßπ")
    await cb.answer()


@dp.callback_query(F.data == "order")
async def start_order_by_button(cb: types.CallbackQuery, state: FSMContext) -> None:
    await begin_order(cb.message, cb.from_user.id, state)
    await cb.answer()


# ---------- –®–∞–≥–∏ —Ñ–æ—Ä–º—ã ----------
@dp.message(OrderForm.phone)
async def get_phone(message: types.Message, state: FSMContext) -> None:
    await state.update_data(phone=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderForm.address)


@dp.message(OrderForm.address)
async def get_address(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    phone = data.get("phone", "")
    address = message.text.strip()

    uid = message.from_user.id
    text, total = cart_text(uid)
    if not CART.get(uid):
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        await state.clear()
        return

    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    order_id = abs(hash((uid, phone, address))) % 1_000_000

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    CART.pop(uid, None)
    await state.clear()

    clean_text = text.replace("<b>–ö–æ—Ä–∑–∏–Ω–∞</b>\n", "")
    await message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
        f"<b>–ù–æ–º–µ—Ä:</b> <code>{order_id}</code>\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {address}\n\n"
        f"{clean_text}"
    )
# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------
async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())